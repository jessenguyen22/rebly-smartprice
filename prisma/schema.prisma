generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model ShopifyShop {
  id                  String                @id @default(uuid()) @db.Uuid
  shopDomain          String                @unique
  accessToken         String?
  scopes              String?
  country             String?
  currency            String?
  timezone            String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  auditTrailEntries   AuditTrailEntry[]
  campaigns           Campaign[]
  pricingJobTemplates PricingJobTemplate[]
  pricingJobs         PricingJob[]
  ruleExecutionStates RuleExecutionState[]
  variantStateHistory VariantStateHistory[]
  webhookLogs         WebhookLog[]
  processingLocks     ProcessingLock[]
  priceCooldowns      PriceCooldown[]

  @@map("shopify_shops")
}

model Campaign {
  id              String               @id @default(uuid()) @db.Uuid
  name            String
  description     String?
  status          CampaignStatus       @default(DRAFT)
  targetProducts  Json
  priority        Int                  @default(1)
  triggerCount    Int                  @default(0)
  lastTriggered   DateTime?
  userId          String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  shopifyShopId   String               @db.Uuid
  shopifyShop     ShopifyShop          @relation(fields: [shopifyShopId], references: [id], onDelete: Cascade)
  rules           PricingRule[]
  executionStates RuleExecutionState[]
  priceCooldowns  PriceCooldown[]

  @@index([shopifyShopId, status])
  @@index([shopifyShopId, lastTriggered])
  @@map("campaigns")
}

model PricingRule {
  id              String               @id @default(uuid()) @db.Uuid
  description     String?
  whenCondition   String
  whenOperator    String
  whenValue       String
  thenAction      String
  thenMode        String
  thenValue       String
  changeCompareAt Boolean              @default(false)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  campaignId      String?              @db.Uuid
  pricingJobId    String?              @db.Uuid
  campaign        Campaign?            @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  pricingJob      PricingJob?          @relation(fields: [pricingJobId], references: [id], onDelete: Cascade)
  executionStates RuleExecutionState[]
  thresholdConfig RuleThresholdConfig?

  @@index([campaignId])
  @@index([pricingJobId])
  @@map("pricing_rules")
}

model PricingJob {
  id                String              @id @default(uuid()) @db.Uuid
  name              String
  type              PricingJobType      @default(MANUAL)
  status            JobStatus           @default(PENDING)
  totalVariants     Int                 @default(0)
  processedCount    Int                 @default(0)
  successCount      Int                 @default(0)
  errorCount        Int                 @default(0)
  startedAt         DateTime?
  completedAt       DateTime?
  userId            String?
  exportPath        String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  shopifyShopId     String              @db.Uuid
  templateId        String?             @db.Uuid
  shopifyShop       ShopifyShop         @relation(fields: [shopifyShopId], references: [id], onDelete: Cascade)
  template          PricingJobTemplate? @relation(fields: [templateId], references: [id])
  rules             PricingRule[]
  processingResults ProcessingResult[]
  selectedVariants  SelectedVariant[]

  @@index([shopifyShopId, status])
  @@index([shopifyShopId, createdAt])
  @@index([templateId])
  @@map("pricing_jobs")
}

model PricingJobTemplate {
  id            String       @id @default(uuid()) @db.Uuid
  name          String
  description   String?
  rules         Json?
  bulkAmount    String?
  bulkType      String?
  userId        String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  shopifyShopId String       @db.Uuid
  shopifyShop   ShopifyShop  @relation(fields: [shopifyShopId], references: [id], onDelete: Cascade)
  pricingJobs   PricingJob[]

  @@unique([shopifyShopId, name])
  @@index([shopifyShopId, updatedAt])
  @@map("pricing_job_templates")
}

model SelectedVariant {
  id             String     @id @default(uuid()) @db.Uuid
  variantId      String
  productId      String
  productTitle   String?
  variantTitle   String?
  currentPrice   String?
  compareAtPrice String?
  inventory      Int?
  createdAt      DateTime   @default(now())
  pricingJobId   String     @db.Uuid
  pricingJob     PricingJob @relation(fields: [pricingJobId], references: [id], onDelete: Cascade)

  @@index([pricingJobId])
  @@index([variantId])
  @@map("selected_variants")
}

model ProcessingResult {
  id              String           @id @default(uuid()) @db.Uuid
  variantId       String
  productId       String
  success         Boolean
  oldPrice        String?
  newPrice        String?
  oldCompareAt    String?
  newCompareAt    String?
  errorMessage    String?
  processedAt     DateTime         @default(now())
  pricingJobId    String           @db.Uuid
  auditTrailId    String?          @db.Uuid
  auditTrailEntry AuditTrailEntry? @relation(fields: [auditTrailId], references: [id])
  pricingJob      PricingJob       @relation(fields: [pricingJobId], references: [id], onDelete: Cascade)

  @@index([pricingJobId])
  @@index([variantId])
  @@index([auditTrailId])
  @@map("processing_results")
}

model AuditTrailEntry {
  id                String             @id @default(uuid()) @db.Uuid
  entityType        String
  entityId          String
  changeType        String
  oldValue          String?
  newValue          String?
  triggerReason     String
  userId            String?
  campaignId        String?
  pricingJobId      String?
  metadata          Json?
  timestamp         DateTime           @default(now())
  shopifyShopId     String             @db.Uuid
  shopifyShop       ShopifyShop        @relation(fields: [shopifyShopId], references: [id], onDelete: Cascade)
  processingResults ProcessingResult[]

  @@index([shopifyShopId, timestamp])
  @@index([entityType, entityId])
  @@index([changeType, timestamp])
  @@index([campaignId])
  @@index([pricingJobId])
  @@map("audit_trail_entries")
}

model WebhookLog {
  id            String        @id @default(uuid()) @db.Uuid
  webhookType   String
  shopifyId     String
  payload       Json
  status        WebhookStatus @default(RECEIVED)
  processedAt   DateTime?
  errorMessage  String?
  retryCount    Int           @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  shopifyShopId String        @db.Uuid
  shopifyShop   ShopifyShop   @relation(fields: [shopifyShopId], references: [id], onDelete: Cascade)

  @@index([shopifyShopId, webhookType])
  @@index([status, createdAt])
  @@map("webhook_logs")
}

model RuleExecutionState {
  id                 String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ruleId             String                    @db.Uuid
  variantId          String
  campaignId         String                    @db.Uuid
  state              public_RuleExecutionState @default(INACTIVE)
  lastTriggerValue   Decimal?                  @db.Decimal(10, 2)
  lastInventoryValue Int?
  thresholdDirection ThresholdDirection?
  triggeredAt        DateTime?
  cooldownUntil      DateTime?
  resetConditionMet  Boolean                   @default(false)
  triggerCount       Int                       @default(0)
  metadata           Json?
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @default(now()) @updatedAt
  shopifyShopId      String                    @db.Uuid
  campaign           Campaign                  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  rule               PricingRule               @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  shopifyShop        ShopifyShop               @relation(fields: [shopifyShopId], references: [id], onDelete: Cascade)

  @@unique([variantId, ruleId], map: "rule_execution_states_variant_rule_unique")
  @@index([campaignId, state], map: "rule_execution_states_campaign_state_idx")
  @@index([variantId, ruleId], map: "rule_execution_states_variant_rule_idx")
  @@map("rule_execution_states")
}

model VariantStateHistory {
  id                String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  variantId         String
  productId         String
  inventoryQuantity Int
  priceAmount       Decimal     @db.Decimal(10, 2)
  compareAtPrice    Decimal?    @db.Decimal(10, 2)
  inventoryChange   Int         @default(0)
  priceChange       Decimal     @default(0) @db.Decimal(10, 2)
  changeReason      String?
  capturedAt        DateTime    @default(now())
  shopifyShopId     String      @db.Uuid
  shopifyShop       ShopifyShop @relation(fields: [shopifyShopId], references: [id], onDelete: Cascade)

  @@index([shopifyShopId, capturedAt], map: "variant_state_history_shop_time_idx")
  @@index([variantId, capturedAt], map: "variant_state_history_variant_time_idx")
  @@map("variant_state_history")
}

model RuleThresholdConfig {
  id                     String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ruleId                 String      @unique(map: "rule_threshold_configs_rule_unique") @db.Uuid
  triggerThreshold       Decimal     @db.Decimal(10, 2)
  triggerOperator        String
  resetThreshold         Decimal?    @db.Decimal(10, 2)
  resetOperator          String?
  minimumCooldownMinutes Int         @default(60)
  requiresResetCondition Boolean     @default(true)
  maxTriggersPerDay      Int?        @default(5)
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @default(now()) @updatedAt
  rule                   PricingRule @relation(fields: [ruleId], references: [id], onDelete: Cascade)

  @@index([ruleId], map: "rule_threshold_configs_rule_idx")
  @@map("rule_threshold_configs")
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}

enum PricingJobType {
  MANUAL
  CAMPAIGN
  WEBHOOK_SYNC
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum WebhookStatus {
  RECEIVED
  PROCESSED
  FAILED
  RETRYING
}

enum ThresholdDirection {
  ABOVE
  BELOW
  CROSSING_UP
  CROSSING_DOWN
}

enum public_RuleExecutionState {
  INACTIVE
  TRIGGERED
  COOLING_DOWN
  RESET_PENDING

  @@map("RuleExecutionState")
}

model ProcessingLock {
  id            String      @id @default(uuid()) @db.Uuid
  lockKey       String      @unique
  type          String      // 'WEBHOOK_PROCESSING' | 'CAMPAIGN_EXECUTION'
  expiresAt     DateTime
  processId     String?
  createdAt     DateTime    @default(now())
  shopifyShopId String      @db.Uuid
  shopifyShop   ShopifyShop @relation(fields: [shopifyShopId], references: [id], onDelete: Cascade)

  @@map("processing_locks")
}

model PriceCooldown {
  id            String      @id @default(uuid()) @db.Uuid
  variantId     String
  campaignId    String?     @db.Uuid
  type          String      // 'PRICE_UPDATE' | 'CAMPAIGN_TRIGGER'
  expiresAt     DateTime
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  shopifyShopId String      @db.Uuid
  shopifyShop   ShopifyShop @relation(fields: [shopifyShopId], references: [id], onDelete: Cascade)
  campaign      Campaign?   @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@unique([variantId, type])
  @@map("price_cooldowns")
}
