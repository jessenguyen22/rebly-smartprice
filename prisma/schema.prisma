generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model ShopifyShop {
  id                  String               @id @default(uuid()) @db.Uuid
  shopDomain          String               @unique
  accessToken         String?
  scopes              String?
  country             String?
  currency            String?
  timezone            String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  auditTrailEntries   AuditTrailEntry[]
  campaigns           Campaign[]
  pricingJobTemplates PricingJobTemplate[]
  pricingJobs         PricingJob[]
  webhookLogs         WebhookLog[]
  priceCooldowns      PriceCooldown[]
  processingLocks     ProcessingLock[]

  @@map("shopify_shops")
}

model Campaign {
  id             String         @id @default(uuid()) @db.Uuid
  name           String
  description    String?
  status         CampaignStatus @default(DRAFT)
  targetProducts Json
  priority       Int            @default(1)
  triggerCount   Int            @default(0)
  lastTriggered  DateTime?
  userId         String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  shopifyShopId  String         @db.Uuid
  shopifyShop    ShopifyShop    @relation(fields: [shopifyShopId], references: [id], onDelete: Cascade)
  rules          PricingRule[]

  @@index([shopifyShopId, status])
  @@index([shopifyShopId, lastTriggered])
  @@map("campaigns")
}

model PricingRule {
  id              String      @id @default(uuid()) @db.Uuid
  description     String?
  whenCondition   String
  whenOperator    String
  whenValue       String
  thenAction      String
  thenMode        String
  thenValue       String
  changeCompareAt Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  campaignId      String?     @db.Uuid
  pricingJobId    String?     @db.Uuid
  campaign        Campaign?   @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  pricingJob      PricingJob? @relation(fields: [pricingJobId], references: [id], onDelete: Cascade)

  @@index([campaignId])
  @@index([pricingJobId])
  @@map("pricing_rules")
}

model PricingJob {
  id                String              @id @default(uuid()) @db.Uuid
  name              String
  type              PricingJobType      @default(MANUAL)
  status            JobStatus           @default(PENDING)
  totalVariants     Int                 @default(0)
  processedCount    Int                 @default(0)
  successCount      Int                 @default(0)
  errorCount        Int                 @default(0)
  startedAt         DateTime?
  completedAt       DateTime?
  userId            String?
  exportPath        String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  shopifyShopId     String              @db.Uuid
  templateId        String?             @db.Uuid
  shopifyShop       ShopifyShop         @relation(fields: [shopifyShopId], references: [id], onDelete: Cascade)
  template          PricingJobTemplate? @relation(fields: [templateId], references: [id])
  rules             PricingRule[]
  processingResults ProcessingResult[]
  selectedVariants  SelectedVariant[]

  @@index([shopifyShopId, status])
  @@index([shopifyShopId, createdAt])
  @@index([templateId])
  @@map("pricing_jobs")
}

model PricingJobTemplate {
  id            String       @id @default(uuid()) @db.Uuid
  name          String
  description   String?
  rules         Json?
  bulkAmount    String?
  bulkType      String?
  userId        String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  shopifyShopId String       @db.Uuid
  shopifyShop   ShopifyShop  @relation(fields: [shopifyShopId], references: [id], onDelete: Cascade)
  pricingJobs   PricingJob[]

  @@unique([shopifyShopId, name])
  @@index([shopifyShopId, updatedAt])
  @@map("pricing_job_templates")
}

model SelectedVariant {
  id             String     @id @default(uuid()) @db.Uuid
  variantId      String
  productId      String
  productTitle   String?
  variantTitle   String?
  currentPrice   String?
  compareAtPrice String?
  inventory      Int?
  createdAt      DateTime   @default(now())
  pricingJobId   String     @db.Uuid
  pricingJob     PricingJob @relation(fields: [pricingJobId], references: [id], onDelete: Cascade)

  @@index([pricingJobId])
  @@index([variantId])
  @@map("selected_variants")
}

model ProcessingResult {
  id              String           @id @default(uuid()) @db.Uuid
  variantId       String
  productId       String
  success         Boolean
  oldPrice        String?
  newPrice        String?
  oldCompareAt    String?
  newCompareAt    String?
  errorMessage    String?
  processedAt     DateTime         @default(now())
  pricingJobId    String           @db.Uuid
  auditTrailId    String?          @db.Uuid
  auditTrailEntry AuditTrailEntry? @relation(fields: [auditTrailId], references: [id])
  pricingJob      PricingJob       @relation(fields: [pricingJobId], references: [id], onDelete: Cascade)

  @@index([pricingJobId])
  @@index([variantId])
  @@index([auditTrailId])
  @@map("processing_results")
}

model AuditTrailEntry {
  id                String             @id @default(uuid()) @db.Uuid
  entityType        String
  entityId          String
  changeType        String
  oldValue          String?
  newValue          String?
  triggerReason     String
  userId            String?
  campaignId        String?
  pricingJobId      String?
  metadata          Json?
  timestamp         DateTime           @default(now())
  shopifyShopId     String             @db.Uuid
  shopifyShop       ShopifyShop        @relation(fields: [shopifyShopId], references: [id], onDelete: Cascade)
  processingResults ProcessingResult[]

  @@index([shopifyShopId, timestamp])
  @@index([entityType, entityId])
  @@index([changeType, timestamp])
  @@index([campaignId])
  @@index([pricingJobId])
  @@map("audit_trail_entries")
}

model WebhookLog {
  id            String        @id @default(uuid()) @db.Uuid
  webhookType   String
  shopifyId     String
  payload       Json
  status        WebhookStatus @default(RECEIVED)
  processedAt   DateTime?
  errorMessage  String?
  retryCount    Int           @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  shopifyShopId String        @db.Uuid
  shopifyShop   ShopifyShop   @relation(fields: [shopifyShopId], references: [id], onDelete: Cascade)

  @@index([shopifyShopId, webhookType])
  @@index([status, createdAt])
  @@map("webhook_logs")
}

model PriceCooldown {
  id          String      @id @default(uuid()) @db.Uuid
  variantId   String
  campaignId  String?
  type        CooldownType @default(PRICE_UPDATE)
  expiresAt   DateTime
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  shopifyShopId String    @db.Uuid
  shopifyShop   ShopifyShop @relation(fields: [shopifyShopId], references: [id], onDelete: Cascade)

  @@unique([variantId, type])
  @@index([variantId, expiresAt])
  @@index([shopifyShopId])
  @@index([expiresAt])
  @@map("price_cooldowns")
}

model ProcessingLock {
  id          String              @id @default(uuid()) @db.Uuid
  lockKey     String              @unique // webhook_<messageId> or campaign_<campaignId>_<variantId>
  type        ProcessingLockType
  expiresAt   DateTime
  processId   String?             // Optional process identifier
  createdAt   DateTime            @default(now())
  shopifyShopId String            @db.Uuid
  shopifyShop   ShopifyShop       @relation(fields: [shopifyShopId], references: [id], onDelete: Cascade)

  @@index([lockKey, expiresAt])
  @@index([shopifyShopId])
  @@index([expiresAt])
  @@map("processing_locks")
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}

enum PricingJobType {
  MANUAL
  CAMPAIGN
  WEBHOOK_SYNC
  ROLLBACK
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  IN_PROGRESS
}

enum WebhookStatus {
  RECEIVED
  PROCESSED
  FAILED
  RETRYING
}

enum CooldownType {
  PRICE_UPDATE
  CAMPAIGN_TRIGGER
}

enum ProcessingLockType {
  WEBHOOK_PROCESSING
  CAMPAIGN_EXECUTION
}
